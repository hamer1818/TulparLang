// ============================================
// GELİŞMİŞ FONKSİYONLAR & REKÜRSİF ÖRNEKLER
// ============================================

print("=== GELİŞMİŞ FONKSİYON ÖRNEKLERİ ===");
print("");

// ----------------------------------------
// 1. FİBONACCİ (Rekursif)
// ----------------------------------------

func fibonacci(int n) {
    if (n <= 1) {
        return n;
    }
    int a = fibonacci(n - 1);
    int b = fibonacci(n - 2);
    return a + b;
}

print("--- Fibonacci Dizisi ---");
print("Fibonacci(0) =", fibonacci(0));
print("Fibonacci(1) =", fibonacci(1));
print("Fibonacci(5) =", fibonacci(5));
print("Fibonacci(8) =", fibonacci(8));
print("Fibonacci(10) =", fibonacci(10));
print("Fibonacci(12) =", fibonacci(12));
print("");

print("İlk 15 Fibonacci sayısı:");
for (int i = 0; i < 15; i++) {
    int fib = fibonacci(i);
    print("F(", i, ") =", fib);
}
print("");

// ----------------------------------------
// 2. FAKTÖRİYEL (Rekursif)
// ----------------------------------------

func faktoriyel_recursive(int n) {
    if (n <= 1) {
        return 1;
    }
    int onceki = faktoriyel_recursive(n - 1);
    return n * onceki;
}

func faktoriyel_iterative(int n) {
    int sonuc = 1;
    for (int i = 2; i <= n; i++) {
        sonuc *= i;
    }
    return sonuc;
}

print("--- Faktöriyel (İki Yöntem) ---");
print("5! (Rekursif) =", faktoriyel_recursive(5));
print("5! (İteratif) =", faktoriyel_iterative(5));
print("7! (Rekursif) =", faktoriyel_recursive(7));
print("7! (İteratif) =", faktoriyel_iterative(7));
print("10! (Rekursif) =", faktoriyel_recursive(10));
print("10! (İteratif) =", faktoriyel_iterative(10));
print("");

// ----------------------------------------
// 3. ÜS ALMA (Rekursif & İteratif)
// ----------------------------------------

func power_recursive(int a, int b) {
    if (b == 0) {
        return 1;
    }
    if (b == 1) {
        return a;
    }
    int prev = power_recursive(a, b - 1);
    return a * prev;
}

func power_iterative(int a, int b) {
    int sonuc = 1;
    for (int i = 0; i < b; i++) {
        sonuc *= a;
    }
    return sonuc;
}

print("--- Üs Alma ---");
print("2^5 (Rekursif) =", power_recursive(2, 5));
print("2^5 (İteratif) =", power_iterative(2, 5));
print("3^4 (Rekursif) =", power_recursive(3, 4));
print("3^4 (İteratif) =", power_iterative(3, 4));
print("10^3 (Rekursif) =", power_recursive(10, 3));
print("10^3 (İteratif) =", power_iterative(10, 3));
print("");

// ----------------------------------------
// 4. TOPLAM (Rekursif)
// ----------------------------------------

func toplam_recursive(int n) {
    if (n <= 0) {
        return 0;
    }
    return n + toplam_recursive(n - 1);
}

print("--- 1'den N'e Kadar Toplam ---");
print("toplam(5) =", toplam_recursive(5));    // 1+2+3+4+5 = 15
print("toplam(10) =", toplam_recursive(10));  // 55
print("toplam(100) =", toplam_recursive(100)); // 5050
print("");

// ----------------------------------------
// 5. ASAL SAYI KONTROLÜ
// ----------------------------------------

func asal_mi(int n) {
    if (n <= 1) {
        return 0;  // false
    }
    if (n == 2) {
        return 1;  // true
    }
    
    for (int i = 2; i < n; i++) {
        int bolum = n / i;
        int kalan = n - (bolum * i);
        if (kalan == 0) {
            return 0;  // false
        }
    }
    return 1;  // true
}

print("--- Asal Sayı Kontrolü ---");
print("asal_mi(2) =", asal_mi(2));
print("asal_mi(7) =", asal_mi(7));
print("asal_mi(10) =", asal_mi(10));
print("asal_mi(13) =", asal_mi(13));
print("asal_mi(15) =", asal_mi(15));
print("asal_mi(17) =", asal_mi(17));
print("");

print("1-30 arası asal sayılar:");
for (int i = 1; i <= 30; i++) {
    if (asal_mi(i)) {
        print(i, "(asal)");
    }
}
print("");

// ----------------------------------------
// 6. EBOB (En Büyük Ortak Bölen) - Öklid
// ----------------------------------------

func ebob(int a, int b) {
    if (b == 0) {
        return a;
    }
    int kalan = a - ((a / b) * b);
    return ebob(b, kalan);
}

print("--- EBOB (Öklid Algoritması) ---");
print("ebob(48, 18) =", ebob(48, 18));
print("ebob(100, 50) =", ebob(100, 50));
print("ebob(17, 13) =", ebob(17, 13));
print("");

// ----------------------------------------
// 7. EKOK (En Küçük Ortak Kat)
// ----------------------------------------

func ekok(int a, int b) {
    int e = ebob(a, b);
    int sonuc = (a * b) / e;
    return sonuc;
}

print("--- EKOK ---");
print("ekok(4, 6) =", ekok(4, 6));
print("ekok(12, 18) =", ekok(12, 18));
print("ekok(7, 5) =", ekok(7, 5));
print("");

// ----------------------------------------
// 8. MÜKEMMEL SAYI KONTROLÜ
// ----------------------------------------

func mukemmel_mi(int n) {
    int toplam = 0;
    for (int i = 1; i < n; i++) {
        int bolum = n / i;
        int kalan = n - (bolum * i);
        if (kalan == 0) {
            toplam += i;
        }
    }
    
    if (toplam == n) {
        return 1;
    }
    return 0;
}

print("--- Mükemmel Sayı Kontrolü ---");
print("mukemmel_mi(6) =", mukemmel_mi(6));    // 1+2+3=6
print("mukemmel_mi(28) =", mukemmel_mi(28));  // 1+2+4+7+14=28
print("mukemmel_mi(12) =", mukemmel_mi(12));
print("");

// ----------------------------------------
// 9. PALINDROM SAYI KONTROLÜ
// ----------------------------------------

func palindrom_sayi_mi(int n) {
    int orijinal = n;
    int ters = 0;
    
    while (n > 0) {
        int basamak = n - ((n / 10) * 10);
        ters = ters * 10 + basamak;
        n = n / 10;
    }
    
    if (orijinal == ters) {
        return 1;
    }
    return 0;
}

print("--- Palindrom Sayı ---");
print("palindrom_sayi_mi(121) =", palindrom_sayi_mi(121));
print("palindrom_sayi_mi(123) =", palindrom_sayi_mi(123));
print("palindrom_sayi_mi(1221) =", palindrom_sayi_mi(1221));
print("");

// ----------------------------------------
// 10. ARMSTRONG SAYISI
// ----------------------------------------

func armstrong_mi(int n) {
    int orijinal = n;
    int toplam = 0;
    int basamak_sayisi = 0;
    
    // Basamak sayısını bul
    int temp = n;
    while (temp > 0) {
        basamak_sayisi++;
        temp = temp / 10;
    }
    
    // Armstrong kontrolü
    temp = n;
    while (temp > 0) {
        int basamak = temp - ((temp / 10) * 10);
        int us = power_iterative(basamak, basamak_sayisi);
        toplam += us;
        temp = temp / 10;
    }
    
    if (toplam == orijinal) {
        return 1;
    }
    return 0;
}

print("--- Armstrong Sayısı ---");
print("armstrong_mi(153) =", armstrong_mi(153));  // 1³+5³+3³=153
print("armstrong_mi(370) =", armstrong_mi(370));  // 3³+7³+0³=370
print("armstrong_mi(123) =", armstrong_mi(123));
print("");

// ----------------------------------------
// SONUÇ
// ----------------------------------------
print("=================================");
print("✅ Gelişmiş fonksiyonlar tamam!");
print("=================================");

